{"version":3,"sources":["About.js","KGraph.js","Home.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["About","className","href","KGraph","myConfig","nodeHighlightBehavior","node","color","size","highlightStrokeColor","link","highlightColor","renderLabel","directed","id","data","nodes","this","props","links","config","React","Component","Home","ROOT","placeholder","onClick","value","state","inputValue","console","log","setState","showGraph","loading","fetch","then","res","json","result","length","alert","reduce","r","e","push","source","target","unique","Set","map","u","evt","onChange","updateInputValue","rows","Loading","type","height","width","App","role","aria-label","to","src","logo","alt","style","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.86ef7e11.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function About() {\n    return (\n    <section className=\"hero is-primary\">\n        <div className=\"hero-body\">\n          <p className=\"title\">\n            About\n          </p>\n          <p className=\"subtitle\">\n            This app is created by Ron Wu. <br/>\n            For any question about the app, please shoot me an email to <a href=\"mailto:roncwu@gmail.com\">roncwu@gmail.com</a>.\n          </p>\n        </div>\n    </section>\n    )\n}","import React from 'react'\nimport { Graph } from \"react-d3-graph\";\n\n\n\nexport default class KGraph extends React.Component {\n          \n         myConfig = {\n            nodeHighlightBehavior: true,\n            node: {\n                color: \"lightgreen\",\n                size: 120,\n                highlightStrokeColor: \"blue\",\n            },\n            link: {\n                highlightColor: \"lightblue\",\n                renderLabel: true\n            },\n            directed: true\n        }; \n\n    render() {\n        return  <Graph\n        id=\"graph-id\" // id is mandatory \n        data={{\n            nodes: this.props.nodes,\n            links: this.props.links\n        }}\n        config={this.myConfig} \n    />;\n\n    }\n  \n}","import React from 'react';\nimport './Home.css'; \nimport KGraph from './KGraph'\nimport Loader from 'react-loader-spinner'\n\nexport default class Home extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            inputValue: '',\n            showGraph: false,\n            loading: false\n        }\n    }\n\n    ROOT = '' // localhost:8080\n\n    placeholder = \"Robotics is an interdisciplinary branch of engineering and science \" +\n                \"that includes mechanical engineering, electrical engineering, computer science, \" +\n                \"and others. Robotics deals with the design, construction, operation, and use of \" +\n                \"robots, as well as computer systems for their control, sensory feedback, and \" +\n                \"information processing. These technologies are used to develop machines that \" +\n                \"can substitute for humans. Robots can be used in any situation and for any purpose, \" +\n                \"but today many are used in dangerous environments (including bomb detection and \" + \n                \"de-activation), manufacturing processes, or where humans cannot survive. Robots can \" + \n                \"take on any form but some are made to resemble humans in appearance. This is said to \" +\n                \"help in the acceptance of a robot in certain replicative behaviors usually performed by \" +\n                \"people. Such robots attempt to replicate walking, lifting, speech, cognition, and basically \" +\n                \"anything a human can do.\";\n \n    onClick =  () => {\n        const value  = (this.state.inputValue)? this.state.inputValue : this.placeholder;\n        console.log(value)\n        this.setState({  \n            showGraph: false,\n            loading: true\n        });  \n        fetch( this.ROOT = \"/kg?text=\" + value +\"\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log(result)\n                    if (result.length === 0){\n\n                        this.setState({  \n                            showGraph: false,\n                            loading: false\n                        });  \n                        alert(\"Please try a different text with more content.\")\n\n                    }else { \n                        const nodes = result.reduce(function(r, e) {\n                            r.push(e.source, e.target);\n                            return r;\n                          }, []);\n    \n                        const unique = [...new Set(nodes)]; \n    \n                        this.setState({ \n                            links: result,\n                            nodes: unique.map(u => ({id: u})),\n                            showGraph: true,\n                            loading: false\n                        });  \n                    }\n\n                }\n            )\n        }\n    \n\n    updateInputValue(evt) {\n        this.setState({\n          inputValue: evt.target.value\n        });\n    }\n\n    render() {\n       return  ( \n            <div className=\"columns\" >\n                <div className=\"column is-one-quarter\" >\n                    <p className=\"subtitle\">Enter some text</p>\n                    <div className=\"field\">\n                    <div className=\"control\">\n                        <textarea value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)} className=\"textarea\" placeholder={this.placeholder} rows=\"16\" ></textarea>\n                    </div>\n                    </div>\n                    <button className=\"button is-primary\" onClick={this.onClick}>Get Kownledge Graph</button>\n                </div>\n                <div className=\"column\">\n                    {this.state.showGraph?<KGraph nodes={this.state.nodes} links={this.state.links}/>:this.state.loading?<Loading/>:null}\n                </div> \n            </div>\n        )\n    }\n}\n\nfunction Loading() {\n    return (\n        <div>\n            <p>\n                 <Loader type=\"ThreeDots\" color=\"#00d1b2\" height={80} width={80} />\n            </p>\n        </div>\n    )\n}","import React from 'react'; \nimport './App.css';\nimport About from './About'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from './Home'\nimport logo from './logo.png'\n\nfunction App() {\n  return (\n    <Router>\n      <header>\n      <nav className=\"navbar is-primary\" role=\"navigation\" aria-label=\"main navigation\">\n        <div className=\"navbar-brand\">\n          <span className=\"navbar-item\" >\n          <Link to=\"/\">\n            <img src={logo} alt=\"Bulma: Free, open source, and modern CSS framework based on Flexbox\" width=\"140\"/>\n          </Link>\n          </span>\n        </div>\n        <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n          <div className=\"navbar-start\">\n            <span className=\"navbar-item\">\n              <Link to=\"/\" style={{color:\"white\"}}>Home</Link>\n            </span> \n            <span className=\"navbar-item\">\n              <Link to=\"/about\" style={{color:\"white\"}}>About</Link>\n            </span>\n          </div>\n        </div>\n      </nav>\n      </header>\n         <Switch>\n              <Route path=\"/about\">\n                <About />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n          </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bulma/css/bulma.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.43800813.png\";"],"sourceRoot":""}